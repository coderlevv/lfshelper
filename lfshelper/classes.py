"""Classes representing sections and packages of a LFS book."""

import re
from pathlib import Path
import os
from os.path import basename

class HTMLParseError(Exception):
    """Exception while parsing a html file."""
    pass

class Section():
    """Represents a section in the LFS book."""

    def __init__(self, chapter, section, chapter_id, title_div):
        """
        Parameters:
        -----------
        chapter: int
            LFS book chapter number
        section: int
            LFS book section number
        chapter_id: str
            chapter id in html file
        title_div: Element object
            div element containing the section commands
        package: Package object
            section package
        cmds: str
            extracted section commands
        changedir: int
            directory depth generated by section commands
        newfile: boolean
            generate new file and continue with this section
        append: [str]
            commands to append after section commands
        message: [str]
            message to echo after section commands
        output: boolean
            output flag
        """

        self.chapter = chapter
        self.section = section
        self.chapter_id = chapter_id
        self.title_div = title_div
        self.package = None
        self.cmds = None
        self.changedir = 0
        self.newfile = False
        self.append = None
        self.message = None
        self.output = False

    def __repr__(self):
        return self.chapter_id


class Package():
    """Represents a software package of the LFS book."""

    # tar commands for different file extension
    tar_ext = dict({'gz': 'xvzf', 'xz': 'xvJf', 'bz2': 'xvjf'})
    
    def __init__(self, href, md5):
        """
        Parameters:
        -----------
        href: str
            package url extracted from html file
        md5: str
            md5 sum extracted from htmlfile
        """

        self.name = basename(href)
        self.md5 = md5
        self.tar = self.tar_ext[self.name.split('.')[-1]]
        self.base = self.get_unique_base_name(self.name)
        tar_opt = self.tar.replace("x", "t")
        tar_out = os.popen(f"tar {tar_opt} {self.name}|head -n1").read()
        unpack_name = Path(tar_out.split()[-1]).parts[0]
        assert unpack_name != ""
        self.unpack_name = unpack_name

    
    def __repr__(self):
        return self.unpack_name


    def get_unique_base_name(self, name):
        """Generate a unique basename for each package."""

        base = name.split('.')[0].split("-")[0]
        if base == "man":
            base = '-'.join(name.split('.')[0].split("-")[:2])
        elif base in ["m4", "bzip2", "iproute2", "e2fsprogs"]:
            pass
        else:
            base = re.sub("\\d+", "", base)
        return base
